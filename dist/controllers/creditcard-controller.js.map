{"version":3,"sources":["../../src/controllers/creditcard-controller.js"],"names":["config","db","api","jsonResponse","post","req","res","data","body","assert","notEmpty","getValidationResult","then","result","isEmpty","messages","map","array","value","msg","error","status","json","creditCard","save","saved","push","err","get","find","cards","orderBy"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;kBAEe,gBAAoB;AAAA,QAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,QAATC,EAAS,QAATA,EAAS;;AAC/B,QAAIC,MAAM,sBAAV;AACA,QAAIC,eAAe,wBAAnB;;AAEA;AACAD,QAAIE,IAAJ,CAAS,EAAT,sBAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,6CAA0BH,YAA1B,EAAwCE,GAAxC,EAA6CC,GAA7C,EAAkD,YAAM;AACpD,gBAAIC,OAAOF,IAAIG,IAAf;;AAEAH,gBAAII,MAAJ,CAAW,MAAX,EAAmB,iCAAnB,EAAsDC,QAAtD;AACAL,gBAAII,MAAJ,CAAW,QAAX,EAAoB,kCAApB,EAAwDC,QAAxD;AACAL,gBAAII,MAAJ,CAAW,QAAX,EAAoB,4BAApB,EAAkDC,QAAlD;;AAEAL,gBAAIM,mBAAJ,GAA0BC,IAA1B,CAA+B,kBAAU;AACrC,oBAAI,CAACC,OAAOC,OAAP,EAAL,EAAuB;;AAEnBX,iCAAaI,IAAb,GAAoB,IAApB;AACAJ,iCAAaY,QAAb,GAAwB,iBAAEC,GAAF,CAAMH,OAAOI,KAAP,EAAN,EAAsB;AAAA,+BAASC,MAAMC,GAAf;AAAA,qBAAtB,CAAxB;AACAhB,iCAAaiB,KAAb,GAAqB,kBAArB;AACAd,wBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBnB,YAArB;AACH;;AAED,oBAAIoB,aAAa,yBAAehB,IAAf,CAAjB;AACA;AACAgB,2BAAWC,IAAX,CAAgB,UAACJ,KAAD,EAAQK,KAAR,EAAkB;AAC9B,wBAAIL,KAAJ,EAAW;AACPjB,qCAAaI,IAAb,GAAoB,IAApB;AACAJ,qCAAaY,QAAb,CAAsBW,IAAtB,CAA2B,mBAA3B;AACAvB,qCAAaiB,KAAb,GAAqBO,GAArB;;AAEArB,4BAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBnB,YAArB;AACH;;AAEDA,iCAAaI,IAAb,GAAoBkB,KAApB;AACAtB,iCAAaY,QAAb,CAAsBW,IAAtB,CAA2B,+BAA3B;AACAvB,iCAAaiB,KAAb,GAAqB,IAArB;;AAEAd,wBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBnB,YAArB;AACH,iBAdD;AAeH,aA1BD;AA2BH,SAlCD;AAmCH,KApCD;;AAsCA;AACAD,QAAI0B,GAAJ,CAAQ,EAAR,sBAA0B,UAACvB,GAAD,EAAMC,GAAN,EAAc;;AAEpC,YAAIH,eAAe,wBAAnB;;AAEA,6BAAW0B,IAAX,CAAgB,EAAhB,EAAoB,UAACF,GAAD,EAAMG,KAAN,EAAgB;AAChC,gBAAIH,GAAJ,EAAS;AACLxB,6BAAaI,IAAb,GAAoB,IAApB;AACAJ,6BAAaY,QAAb,CAAsBW,IAAtB,CAA2B,mBAA3B;AACAvB,6BAAaiB,KAAb,GAAqBO,GAArB;AACArB,oBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBnB,YAArB;AACH;;AAEDA,yBAAaI,IAAb,GAAoB,iBAAEwB,OAAF,CAAUD,KAAV,EAAgB,CAAC,MAAD,CAAhB,EAAyB,CAAC,KAAD,CAAzB,CAApB;AACA3B,yBAAaY,QAAb,GAAwB,CAAC,iBAAD,CAAxB;AACAZ,yBAAaiB,KAAb,GAAqB,IAArB;AACAd,gBAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBnB,YAArB;AACH,SAZD;AAaH,KAjBD;;AAmBA,WAAOD,GAAP;AACH,C","file":"creditcard-controller.js","sourcesContent":["import _ from 'lodash'\nimport slugify from 'slugify'\nimport { Router } from 'express'\nimport { verifyIfUserLoggedIsAdmin, authenticate } from '../middleware/auth'\nimport Response from '../utils/response'\nimport CreditCard from '../models/credit-card'\n\nexport default ({ config, db }) => {\n    let api = Router()\n    let jsonResponse = new Response()\n\n    //POST ADD /api/cards\n    api.post('', authenticate, (req, res) => {\n        verifyIfUserLoggedIsAdmin(jsonResponse, req, res, () => {\n            let data = req.body\n\n            req.assert('name', 'O nome do cartão é obrigatório.').notEmpty()\n            req.assert('number','O numero do cartão é obrigatorio').notEmpty()\n            req.assert('payday','O vencimento é obrigatorio').notEmpty()\n\n            req.getValidationResult().then(result => {\n                if (!result.isEmpty()) {\n\n                    jsonResponse.data = null\n                    jsonResponse.messages = _.map(result.array(), value => value.msg)\n                    jsonResponse.error = 'validationErrors'\n                    res.status(400).json(jsonResponse)\n                }\n\n                let creditCard = new CreditCard(data)\n                //creditCard.slug = slugify(creditCard.name,'_')\n                creditCard.save((error, saved) => {\n                    if (error) {\n                        jsonResponse.data = null\n                        jsonResponse.messages.push('Ouve erro interno')\n                        jsonResponse.error = err\n\n                        res.status(500).json(jsonResponse)\n                    }\n\n                    jsonResponse.data = saved\n                    jsonResponse.messages.push('Cartão adicionado com sucesso');\n                    jsonResponse.error = null\n\n                    res.status(200).json(jsonResponse)\n                })\n            })\n        })\n    })\n\n    //GET ALL /api/cards\n    api.get('', authenticate, (req, res) => {\n\n        let jsonResponse = new Response()\n\n        CreditCard.find({}, (err, cards) => {\n            if (err) {\n                jsonResponse.data = null\n                jsonResponse.messages.push('Ouve erro interno')\n                jsonResponse.error = err\n                res.status(500).json(jsonResponse)\n            }\n\n            jsonResponse.data = _.orderBy(cards,['name'],['asc'])\n            jsonResponse.messages = ['Lista carregada']\n            jsonResponse.error = null\n            res.status(200).json(jsonResponse)\n        })\n    })\n\n    return api\n}\n"]}