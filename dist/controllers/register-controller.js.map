{"version":3,"sources":["../../src/controllers/register-controller.js"],"names":["config","db","api","post","req","res","jsonResponse","data","body","validate","then","result","hasError","messages","errors","error","status","json","findById","user","id","err","userAuthenticated","push","register","_id","save","saved","get","findRegisterOf","response","forUserId","params","isAdmin","put","findByIdAndUpdate","new","runValidators","upsert","updated","delete","findByIdAndRemove","needEdit","update","find","assert","notEmpty","Promise","resolve","getValidationResult","isEmpty","map","array","msg","registers"],"mappings":"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","file":"register-controller.js","sourcesContent":["import _ from 'lodash';\nimport { Router } from 'express'\nimport { verifyIfUserLoggedIsAdmin, authenticate } from '../middleware/auth';\n\nimport Response from '../utils/response';\nimport User from '../models/user-model';\nimport Register from '../models/register-model';\n\nexport default ({ config, db }) => {\n    let api = Router();\n\n    //POST ADD /api/registers\n    api.post('', authenticate, (req, res) => {\n\n        let jsonResponse = new Response();\n        let data = req.body;\n\n        validate(req).then(result => {\n\n            if (result.hasError) {\n                jsonResponse.data = null;\n                jsonResponse.messages = result.errors;\n                jsonResponse.error = 'validationError';\n                res.status(400).json(jsonResponse);\n                return;\n\n            }\n\n            User.findById(req.user.id, (err, userAuthenticated) => {\n                if (err) {\n                    jsonResponse.data = null;\n                    jsonResponse.messages.push('Ouve erro interno');\n                    jsonResponse.error = err;\n                    res.status(500).json(jsonResponse);\n                    return;\n                }\n\n                let register = new Register(data);\n                register.user = userAuthenticated._id;\n\n                register.save((err, saved) => {\n                    if (err) {\n                        jsonResponse.data = null;\n                        jsonResponse.messages.push('Ouve erro interno');\n                        jsonResponse.error = err;\n                        res.status(500).json(jsonResponse);\n                        return;\n                    }\n\n                    jsonResponse.data = saved;\n                    jsonResponse.messages.push('Registro adicionado com sucesso');\n                    jsonResponse.error = null;\n                    res.status(200).json(jsonResponse);\n                });\n            });\n\n        });\n\n    });\n\n    //GET ALL REGISTER FOR A USER /api/registers/my\n    api.get('/my', authenticate, (req, res) => {\n        let jsonResponse = new Response();\n\n        findRegisterOf(req.user.id, jsonResponse).then(response => {\n            if (response.error) {\n                res.status(500).json(response);\n                return;\n            }\n\n            res.status(200).json(response);\n        });\n\n    });\n\n    //GET ALL REGISTER OF THE USER /api/registers/user/:id\n    api.get('/user/:id', authenticate, (req, res) => {\n\n        let forUserId = req.params.id;\n        let jsonResponse = new Response();\n\n        User.findById(req.user.id, (err, userAuthenticated) => {\n            if (err) {\n                jsonResponse.data = null;\n                jsonResponse.messages.push('Ouve erro interno');\n                jsonResponse.error = err;\n                res.status(500).json(jsonResponse);\n                return;\n            }\n\n            if (userAuthenticated.isAdmin) {\n                findRegisterOf(forUserId, jsonResponse).then((response) => {\n                    if (response.error) {\n                        res.status(500).json(response);\n                        return;\n                    }\n\n                    res.status(200).json(response);\n                });\n\n            } else {\n                jsonResponse.data = null;\n                jsonResponse.messages.push('Apenas administradores podem usar esse recurso.');\n                jsonResponse.error = 'userNotAdmin';\n\n                res.status(403).json(jsonResponse);\n            }\n\n        });\n\n    });\n\n    //PUT EDIT REGISTER /api/registers/:id\n    api.put('/:id', authenticate, (req, res) => {\n        let data = req.body;\n        let jsonResponse = new Response();\n\n        verifyIfUserLoggedIsAdmin(jsonResponse, req, res, () => {\n            validate(req).then(response => {\n                if (response.hasError) {\n                    res.status(500).json(response);\n                    return;\n                }\n\n                Register.findByIdAndUpdate(req.params.id, data, { new: true, runValidators: true, upsert: false },\n                    (err, updated) => {\n                        if (err) {\n                            jsonResponse.data = null;\n                            jsonResponse.messages.push('Ouve erro interno')\n                            jsonResponse.error = err;\n                            res.status(500).json(jsonResponse);\n                            return;\n                        }\n                        jsonResponse.data = updated;\n                        jsonResponse.messages.push('Registro atualizado com sucesso')\n                        jsonResponse.error = null;\n\n                        res.status(200).json(jsonResponse);\n\n                    });\n\n            })\n        });\n    });\n\n    //DELETE REGISTER /api/registers\n    api.delete('/:id', authenticate, (req, res) => {\n\n        let jsonResponse = new Response();\n\n        verifyIfUserLoggedIsAdmin(jsonResponse, req, res, () => {\n            Register.findByIdAndRemove(req.params.id, (err, result) => {\n                if (err) {\n                    jsonResponse.data = null;\n                    jsonResponse.messages.push('Ouve error interno');\n                    jsonResponse.error = err;\n                    res.status(500).json(jsonResponse);\n                }\n\n                jsonResponse.data = result;\n                jsonResponse.messages.push('Registro removido com sucesso');\n                jsonResponse.error = null;\n\n                res.status(200).json(jsonResponse);\n            });\n        });\n    });\n\n    //PUT NEED EDIT REGISTER /api/registers/neededit/:id\n    api.put('/neededit/:id', authenticate, (req, res) => {\n\n        let jsonResponse = new Response();\n\n        Register.findById(req.params.id, (err, register) => {\n            if (err) {\n                jsonResponse.data = null;\n                jsonResponse.messages.push('Ouve erro interno');\n                jsonResponse.error = err\n                res.status(500).json(jsonResponse);\n            }\n\n            register.needEdit = !register.needEdit;\n\n            Register.update({ _id: register._id }, register, { runValidators: true, new: true, upsert: false }\n                , (err, updated) => {\n\n                    if (err) {\n                        jsonResponse.data = null;\n                        jsonResponse.messages.push('Ouve erro interno');\n                        jsonResponse.error = err\n                        res.status(500).json(jsonResponse);\n                    }\n\n                    jsonResponse.data = updated;\n                    jsonResponse.messages.push('Registro marcado para edição');\n                    jsonResponse.error = null;\n\n                    res.status(200).json(jsonResponse);\n                })\n        })\n    });\n\n    //GET ALL NEED EDIT REGISTE /api/registesrs/neededit\n    api.get('/neededit',authenticate,(req,res)=>{\n        let jsonResponse = new Response();\n\n        verifyIfUserLoggedIsAdmin(jsonResponse,req,res,()=>{\n            Register.find({needEdit:true},(err,result)=>{\n                if (err) {\n                    jsonResponse.data = null;\n                    jsonResponse.messages.push('Ouve erro interno');\n                    jsonResponse.error = err\n                    res.status(500).json(jsonResponse);\n                    return;\n                }\n\n                jsonResponse.data = result;\n                jsonResponse.messages.push('Registros carregados..');\n                jsonResponse.error = null;\n\n                res.status(200).json(jsonResponse);\n            });\n        });\n    });\n\n\n    return api;\n}\n\nfunction validate(req) {\n\n    req.assert('buyAt', `O campo 'data de compra' é obrigatorio`).notEmpty()\n    req.assert('price', `O campo 'preço' é obrigatorio`).notEmpty()\n    req.assert('productName', `O campo 'nome do produto' é obrigatorio`).notEmpty()\n    req.assert('creditCard','É necessario informar o cartão usado').notEmpty()\n    req.assert('local','Informe onde realizou a compra').notEmpty()\n    req.assert('paymentMonth', `O campo 'mês de pagamento' é obrigatorio`).notEmpty()\n\n\n    return new Promise((resolve) => {\n\n        req.getValidationResult().then((result) => {\n            resolve({ hasError: !result.isEmpty(), errors: _.map(result.array(), error => error.msg) });\n        });\n    })\n}\n\nfunction findRegisterOf(id, jsonResponse) {\n\n    return new Promise(resolve => {\n        Register.find({ user: id }, (err, registers) => {\n\n            jsonResponse.data = registers;\n            jsonResponse.messages.push('Registros carregados');\n            jsonResponse.error = null;\n\n            if (err) {\n                jsonResponse.data = null;\n                jsonResponse.messages = [];\n                jsonResponse.messages.push('Ouve erro interno');\n                jsonResponse.error = err;\n            }\n\n\n            resolve(jsonResponse)\n\n        });\n    });\n}"]}