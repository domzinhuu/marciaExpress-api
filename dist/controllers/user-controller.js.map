{"version":3,"sources":["../../src/controllers/user-controller.js"],"names":["config","db","api","post","req","res","response","data","body","assert","notEmpty","matches","getValidationResult","then","result","isEmpty","messages","map","array","value","msg","error","status","json","user","register","password","err","createdUser","name","push","authenticate","session","scope","get","query","find","$and","isAdmin","completeName","$regex","$options","users","put","jsonResponse","userId","params","id","updateValues","cellphone","findByIdAndUpdate","new","upsert","runValidators","updated","reponse","delete","deleteUserId","findByIdAndRemove"],"mappings":"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","file":"user-controller.js","sourcesContent":["import _ from 'lodash';\nimport slugify from 'slugify'\nimport { Router } from 'express';\nimport User from '../models/user-model';\nimport Response from '../utils/response';\nimport passport from 'passport';\n\nimport { accessTokenGeneration, respond, authenticate, verifyIfUserLoggedIsAdmin, verifyIfUserIsAdmin, validateToken } from '../middleware/auth';\n\nexport default ({ config, db }) => {\n    let api = Router();\n\n\n    //POST ADD /api/users/\n    api.post('', (req, res) => {\n\n        let response = new Response();\n        let data = req.body;\n\n        req.assert('completeName', 'Informe o nome do usuario').notEmpty();\n        req.assert('cellphone', 'Informe um numero').notEmpty();\n        req.assert('username', 'informe um nome de usuario ').notEmpty();\n        req.assert('password', 'informe uma senha').notEmpty();\n        req.assert('completeName', 'Informe o nome completo').matches(/[A-Za-z]\\w\\s[A-Za-z]/g);\n\n        req.getValidationResult().then(result => {\n\n            if (!result.isEmpty()) {\n                response.messages = _.map(result.array(), (value) => value.msg);\n                response.data = null;\n                response.error = 'validationErrors';\n                res.status(400).json(response);\n                return;\n            }\n\n            let user = new User(data);\n            //user.slug = slugify(user.completeName,'_')\n            User.register(user, data.password, (err, createdUser) => {\n                if (err) {\n                    response.data = null;\n                    response.error = err;\n                    if (err.name === 'UserExistsError')\n                        response.messages.push('Já existe alguem com o mesmo nome de usuario cadastrado.');\n                    else {\n                        response.messages.push('Ocorreu alguns problemas.');\n                    }\n\n                    res.status(500).json(response);\n                    return;\n                }\n\n                response.data = createdUser;\n                response.messages.push('Usuario cadastrado com sucesso');\n                response.error = null;\n                res.status(200).json(response);\n            })\n        });\n\n    });\n\n    //POST LOGIN /api/users/login\n    api.post('/login', verifyIfUserIsAdmin,\n        passport.authenticate('local', { session: false, scope: [] }), accessTokenGeneration, respond);\n\n\n    //GET ALL /api/users/\n    api.get('', validateToken, authenticate, (req, res) => {\n        const query = req.query.query || ''\n        let response = new Response();\n\n        User.find({ $and: [{ isAdmin: false, completeName: { $regex: query, $options: 'i' } }] }, (err, users) => {\n            if (err) {\n                response.data = null;\n                response.messages.push('Ouve errors internos');\n                response.err = err;\n                res.status(500).json(response);\n                return;\n\n            }\n\n            response.data = users;\n            response.messages.push('Usuarios carregados');\n            response.err = null;\n\n            res.status(200).json(response);\n        });\n    });\n\n    //PUT EDIT /api/users/:id\n    api.put('/:id', validateToken, authenticate, (req, res) => {\n        let jsonResponse = new Response();\n        let userId = req.params.id;\n        let data = req.body;\n\n        verifyIfUserLoggedIsAdmin(jsonResponse, req, res, () => {\n\n            req.assert('completeName', 'Informe o nome do usuario').notEmpty();\n            req.assert('cellphone', 'Informe um numero').notEmpty();\n            req.assert('completeName', 'Informe o nome completo').matches(/[A-Za-z]\\w\\s[A-Za-z]/g);\n\n            req.getValidationResult().then(result => {\n\n                if (!result.isEmpty()) {\n                    jsonResponse.messages = _.map(result.array(), (value) => value.msg);\n                    jsonResponse.data = null;\n                    jsonResponse.error = 'validationErrors';\n                    res.status(400).json(jsonResponse);\n                    return;\n                }\n\n                // segurança para não permitir injeção de dados..\n                let updateValues = {\n                    completeName: data.completeName,\n                    cellphone: data.cellphone\n                }\n\n                User.findByIdAndUpdate(userId, updateValues, { new: true, upsert: false, runValidators: true }, (err, updated) => {\n\n                    if (err) {\n                        jsonResponse.data = null;\n                        reponse.error = err;\n                        jsonResponse.messages.push('Ouve alguns problemas internos');\n\n                        res.status(500).json(jsonResponse);\n                        return;\n                    }\n\n                    jsonResponse.data = updated;\n                    jsonResponse.messages.push('Usuario atualizado com sucesso');\n                    jsonResponse.error = null;\n                    res.status(200).json(jsonResponse);\n                });\n            });\n        });\n\n\n    });\n\n    //DELETE /api/users/:id\n    api.delete('/:id', validateToken, authenticate, (req, res) => {\n\n        let jsonResponse = new Response();\n        let deleteUserId = req.params.id;\n\n        verifyIfUserLoggedIsAdmin(jsonResponse, req, res, () => {\n\n            User.findByIdAndRemove(deleteUserId, (err) => {\n                if (err) {\n                    jsonResponse.data = null;\n                    jsonResponse.messages.push('Ouve errors internos');\n                    jsonResponse.error = err;\n                    res.status(500).json(jsonResponse);\n                    return;\n                }\n\n                jsonResponse.data = null;\n                jsonResponse.messages.push('Usuario deletado com sucesso');\n                jsonResponse.error = null;\n                res.status(200).json(jsonResponse);\n            });\n        });\n\n    });\n\n\n\n    return api;\n}"]}