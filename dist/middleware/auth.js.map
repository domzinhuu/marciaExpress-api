{"version":3,"sources":["../../src/middleware/auth.js"],"names":["TOKEN_TIME","SECRET","authenticate","secret","accessTokenGeneration","req","res","next","token","sign","id","user","expiresIn","respond","response","data","completeName","accessToken","messages","push","error","status","json","verifyIfUserLoggedIsAdmin","jsonResponse","callback","findById","err","isAdmin","verifyIfUserIsAdmin","userId","username","body","method","findOne","validateToken","bearerToken","headers","replace","verify","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport expresJwt from 'express-jwt';\nimport Response from '../utils/response';\nimport User from '../models/user-model';\n\n\nconst TOKEN_TIME = '2h';\nconst SECRET = 'M4rC1a_4p1';\n\nlet authenticate = expresJwt({ secret: SECRET });\n\nlet accessTokenGeneration = (req, res, next) => {\n    req.token = req.token || {};\n    req.token = jwt.sign({ id: req.user.id }, SECRET, { expiresIn: TOKEN_TIME });\n\n    next();\n}\n\nlet respond = (req, res) => {\n    let response = new Response();\n    response.data = {id:req.user.id,completeName: req.user.completeName, accessToken: req.token }\n    response.messages.push('usuario autenticado');\n    response.error = null;\n\n    res.status(200).json(response);\n}\n\nlet verifyIfUserLoggedIsAdmin = (jsonResponse, req, res, callback) => {\n\n    User.findById(req.user.id, (err, user) => {\n        if (err) {\n            jsonResponse.messages.push('Ouve errors internos na verificação de usuario logado como admin');\n            jsonResponse.data = null;\n            jsonResponse.error = 'AdminUsernotFound';\n            res.status(500).json(jsonResponse);\n            return;\n        }\n\n        if (!user.isAdmin) {\n            jsonResponse.messages.push('Apenas administradores podem realizar esta operação');\n            jsonResponse.data = null;\n            jsonResponse.error = 'UserNotAdmin';\n            res.status(403).json(jsonResponse);\n            return;\n        }\n\n        callback();\n    });\n}\n\nlet verifyIfUserIsAdmin = (req, res, next) => {\n    const jsonResponse = new Response();\n    const userId = req.user ? req.user.id : null;\n    const username = req.body.username || null;\n\n    if(req.method === \"OPTIONS\"){\n        next();\n    }\n    if (userId && !username) {\n        User.findById(req.user.id, (err, user) => {\n            if (err) {\n                jsonResponse.messages.push('Ouve errors internos na verificação de usuario logado como admin');\n                jsonResponse.data = null;\n                jsonResponse.error = 'AdminUsernotFound';\n                res.status(500).json(jsonResponse);\n                return;\n            }\n\n            if (!user.isAdmin) {\n                jsonResponse.messages.push('Apenas administradores podem realizar esta operação');\n                jsonResponse.data = null;\n                jsonResponse.error = 'UserNotAdmin';\n                res.status(403).json(jsonResponse);\n                return;\n            }\n\n            next();\n        });\n    } else if (username && !userId) {\n        User.findOne({ username:username }, (err, user) => {\n            if (err) {\n                jsonResponse.messages.push('Ouve errors internos na verificação de usuario logado como admin');\n                jsonResponse.data = null;\n                jsonResponse.error = 'AdminUsernotFound';\n                res.status(500).json(jsonResponse);\n                return;\n            }\n\n            if (!user.isAdmin) {\n                jsonResponse.messages.push('Apenas administradores podem realizar esta operação');\n                jsonResponse.data = null;\n                jsonResponse.error = 'UserNotAdmin';\n                res.status(403).json(jsonResponse);\n                return;\n            }\n\n            next();\n        });\n    }else{\n        next();\n    }\n}\n\nlet validateToken = (req, res, next) => {\n    let response = new Response();\n\n    if (req.method === \"OPTIONS\") {\n        next()\n    } else {\n        const bearerToken = req.headers['authorization']\n\n        if (!bearerToken) {\n            response.messages.push('O Token não foi enviado');\n            response.error = 'noTokenProvider'\n\n            return res.status(403).json(response)\n        }\n\n        const token = bearerToken.replace('Bearer ', '');\n\n        jwt.verify(token, SECRET, (err) => {\n            if (err) {\n                response.messages.push('O Token expirado ou invalido');\n                response.error = err\n                return res.status(403).json(response)\n            }\n\n            next()\n        })\n    }\n\n}\n\nmodule.exports = {\n    authenticate,\n    accessTokenGeneration,\n    respond,\n    verifyIfUserLoggedIsAdmin,\n    verifyIfUserIsAdmin,\n    validateToken\n}"]}